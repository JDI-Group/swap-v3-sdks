{"version":3,"file":"swap-next-sdk.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\r\n  MAINNET = 1,\r\n  GOERLI = 5,\r\n  SEPOLIA = 11155111,\r\n  OPTIMISM = 10,\r\n  OPTIMISM_GOERLI = 420,\r\n  OPTIMISM_SEPOLIA = 11155420,\r\n  ARBITRUM_ONE = 42161,\r\n  ARBITRUM_GOERLI = 421613,\r\n  ARBITRUM_SEPOLIA = 421614,\r\n  POLYGON = 137,\r\n  POLYGON_MUMBAI = 80001,\r\n  CELO = 42220,\r\n  CELO_ALFAJORES = 44787,\r\n  GNOSIS = 100,\r\n  MOONBEAM = 1284,\r\n  BNB = 56,\r\n  AVALANCHE = 43114,\r\n  BASE_GOERLI = 84531,\r\n  BASE_SEPOLIA = 84532,\r\n  BASE = 8453,\r\n  ZORA = 7777777,\r\n  ZORA_SEPOLIA = 999999999,\r\n  ROOTSTOCK = 30,\r\n  BLAST = 81457,\r\n  ZKSYNC = 324,\r\n  WORLDCHAIN = 480,\r\n  UNICHAIN_SEPOLIA = 1301,\r\n  UNICHAIN = 130,\r\n  MONAD_TESTNET = 10143,\r\n  SONEIUM = 1868,\r\n  MONAD = 143,\r\n  MOONCHAIN_HUDSON = 177888,\r\n  MOONCHAIN = 999888,\r\n}\r\n\r\nexport const SUPPORTED_CHAINS = [\r\n  ChainId.MAINNET,\r\n  ChainId.OPTIMISM,\r\n  ChainId.OPTIMISM_GOERLI,\r\n  ChainId.OPTIMISM_SEPOLIA,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.ARBITRUM_GOERLI,\r\n  ChainId.ARBITRUM_SEPOLIA,\r\n  ChainId.POLYGON,\r\n  ChainId.POLYGON_MUMBAI,\r\n  ChainId.GOERLI,\r\n  ChainId.SEPOLIA,\r\n  ChainId.CELO_ALFAJORES,\r\n  ChainId.CELO,\r\n  ChainId.BNB,\r\n  ChainId.AVALANCHE,\r\n  ChainId.BASE,\r\n  ChainId.BASE_GOERLI,\r\n  ChainId.BASE_SEPOLIA,\r\n  ChainId.ZORA,\r\n  ChainId.ZORA_SEPOLIA,\r\n  ChainId.ROOTSTOCK,\r\n  ChainId.BLAST,\r\n  ChainId.ZKSYNC,\r\n  ChainId.WORLDCHAIN,\r\n  ChainId.UNICHAIN_SEPOLIA,\r\n  ChainId.UNICHAIN,\r\n  ChainId.MONAD_TESTNET,\r\n  ChainId.SONEIUM,\r\n  ChainId.MONAD,\r\n  ChainId.MOONCHAIN_HUDSON,\r\n  ChainId.MOONCHAIN,\r\n] as const\r\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\r\n\r\nexport enum NativeCurrencyName {\r\n  // Strings match input for CLI\r\n  ETHER = 'ETH',\r\n  MATIC = 'MATIC',\r\n  CELO = 'CELO',\r\n  GNOSIS = 'XDAI',\r\n  MOONBEAM = 'GLMR',\r\n  BNB = 'BNB',\r\n  AVAX = 'AVAX',\r\n  ROOTSTOCK = 'RBTC',\r\n  MCH = 'MCH',\r\n}\r\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\r\n\r\ntype AddressMap = { [chainId: number]: string }\r\n\r\ntype ChainAddresses = {\r\n  v3CoreFactoryAddress: string\r\n  multicallAddress: string\r\n  quoterAddress: string\r\n  v3MigratorAddress?: string\r\n  nonfungiblePositionManagerAddress?: string\r\n  tickLensAddress?: string\r\n  swapRouter02Address?: string\r\n  mixedRouteQuoterV1Address?: string\r\n  mixedRouteQuoterV2Address?: string\r\n\r\n  // v4\r\n  v4PoolManagerAddress?: string\r\n  v4PositionManagerAddress?: string\r\n  v4StateView?: string\r\n  v4QuoterAddress?: string\r\n}\r\n\r\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\r\n\r\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\r\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = address\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\r\n  ChainId.OPTIMISM,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.POLYGON,\r\n  ChainId.POLYGON_MUMBAI,\r\n  ChainId.SEPOLIA,\r\n])\r\n\r\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\r\n\r\n/**\r\n * @deprecated use V2_FACTORY_ADDRESSES instead\r\n */\r\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\r\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.SEPOLIA]: '0xF62c03E08ada871A0bEb309762E260a7a6a880E6',\r\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\r\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\r\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\r\n  [ChainId.BASE_SEPOLIA]: '0x7Ae58f10f7849cA6F5fB71b7f45CB416c9204b1e',\r\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\r\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\r\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\r\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\r\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\r\n  [ChainId.WORLDCHAIN]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.UNICHAIN_SEPOLIA]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.UNICHAIN]: '0x1f98400000000000000000000000000000000002',\r\n  [ChainId.MONAD_TESTNET]: '0x733e88f248b742db6c14c0b1713af5ad7fdd59d0',\r\n  [ChainId.SONEIUM]: '0x97febbc2adbd5644ba22736e962564b23f5828ce',\r\n  [ChainId.MONAD]: '0x182a927119d56008d921126764bf884221b10f59',\r\n\r\n  [ChainId.MOONCHAIN_HUDSON]: '0x6DE2b019Bd9E4e4be1B444ca1710614C93BcBc8e',\r\n  [ChainId.MOONCHAIN]: '',\r\n}\r\n/**\r\n * @deprecated use V2_ROUTER_ADDRESSES instead\r\n */\r\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\r\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\r\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\r\n  [ChainId.SEPOLIA]: '0xeE567Fe1712Faf6149d80dA1E6934E354124CfE3',\r\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\r\n  [ChainId.BASE_SEPOLIA]: '0x1689E7B1F10000AE47eBfE339a4f69dECd19F602',\r\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\r\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\r\n  [ChainId.WORLDCHAIN]: '0x541aB7c31A119441eF3575F6973277DE0eF460bd',\r\n  [ChainId.UNICHAIN_SEPOLIA]: '0x920b806E40A00E02E7D2b94fFc89860fDaEd3640',\r\n  [ChainId.UNICHAIN]: '0x284f11109359a7e1306c3e447ef14d38400063ff',\r\n  [ChainId.MONAD_TESTNET]: '0xfb8e1c3b833f9e67a71c859a132cf783b645e436',\r\n  [ChainId.SONEIUM]: '0x273f68c234fa55b550b40e563c4a488e0d334320',\r\n  [ChainId.MONAD]: '0x4b2ab38dbf28d31d467aa8993f6c2585981d6804',\r\n\r\n  [ChainId.MOONCHAIN_HUDSON]: '0x6DE2b019Bd9E4e4be1B444ca1710614C93BcBc8e',\r\n  [ChainId.MOONCHAIN]: '',\r\n}\r\n\r\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\r\nconst DEFAULT_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\r\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\r\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\r\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\r\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\r\n}\r\nconst MAINNET_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\r\n\r\n  v4PoolManagerAddress: '0x000000000004444c5dc75cB358380D2e3dE08A90',\r\n  v4PositionManagerAddress: '0xbd216513d74c8cf14cf4747e6aaa6420ff64ee9e',\r\n  v4StateView: '0x7ffe42c4a5deea5b0fec41c94c136cf115597227',\r\n  v4QuoterAddress: '0x52f0e24d1c21c8a0cb1e5a5dd6198556bd9e1203',\r\n}\r\nconst GOERLI_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\r\n}\r\n\r\nconst OPTIMISM_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n\r\n  v4PoolManagerAddress: '0x9a13f98cb987694c9f086b1f5eb990eea8264ec3',\r\n  v4PositionManagerAddress: '0x3c3ea4b57a46241e54610e5f022e5c45859a1017',\r\n  v4StateView: '0xc18a3169788f4f75a170290584eca6395c75ecdb',\r\n  v4QuoterAddress: '0x1f3131a13296fb91c90870043742c3cdbff1a8d7',\r\n}\r\n\r\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\r\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\r\n\r\n  v4PoolManagerAddress: '0x360e68faccca8ca495c1b759fd9eee466db9fb32',\r\n  v4PositionManagerAddress: '0xd88f38f930b7952f2db2432cb002e7abbf3dd869',\r\n  v4StateView: '0x76fd297e2d437cd7f76d50f01afe6160f86e9990',\r\n  v4QuoterAddress: '0x3972c00f7ed4885e145823eb7c655375d275a1c5',\r\n}\r\nconst POLYGON_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n\r\n  v4PoolManagerAddress: '0x67366782805870060151383f4bbff9dab53e5cd6',\r\n  v4PositionManagerAddress: '0x1ec2ebf4f37e7363fdfe3551602425af0b3ceef9',\r\n  v4StateView: '0x5ea1bd7974c8a611cbab0bdcafcb1d9cc9b3ba5a',\r\n  v4QuoterAddress: '0xb3d5c3dfc3a7aebff71895a7191796bffc2c81b9',\r\n}\r\n\r\n// celo v3 and v4 addresses\r\nconst CELO_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\r\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\r\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\r\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\r\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\r\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\r\n\r\n  v4PoolManagerAddress: '0x288dc841A52FCA2707c6947B3A777c5E56cd87BC',\r\n  v4PositionManagerAddress: '0xf7965f3981e4d5bc383bfbcb61501763e9068ca9',\r\n  v4StateView: '0xbc21f8720babf4b20d195ee5c6e99c52b76f2bfb',\r\n  v4QuoterAddress: '0x28566da1093609182dff2cb2a91cfd72e61d66cd',\r\n}\r\n\r\n// BNB v3 addresses\r\nconst BNB_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\r\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\r\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\r\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\r\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\r\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\r\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\r\n\r\n  v4PoolManagerAddress: '0x28e2ea090877bf75740558f6bfb36a5ffee9e9df',\r\n  v4PositionManagerAddress: '0x7a4a5c919ae2541aed11041a1aeee68f1287f95b',\r\n  v4StateView: '0xd13dd3d6e93f276fafc9db9e6bb47c1180aee0c4',\r\n  v4QuoterAddress: '0x9f75dd27d6664c475b90e105573e550ff69437b0',\r\n}\r\n\r\n// optimism goerli addresses\r\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\r\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\r\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\r\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\r\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\r\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\r\n}\r\n\r\n// optimism sepolia addresses\r\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\r\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\r\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\r\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\r\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\r\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\r\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\r\n}\r\n\r\n// arbitrum goerli v3 addresses\r\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\r\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\r\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\r\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\r\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\r\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\r\n}\r\n\r\n// arbitrum sepolia v3 addresses\r\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\r\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\r\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\r\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\r\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\r\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\r\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\r\n\r\n  v4PoolManagerAddress: '0xFB3e0C6F74eB1a21CC1Da29aeC80D2Dfe6C9a317',\r\n  v4PositionManagerAddress: '0xAc631556d3d4019C95769033B5E719dD77124BAc',\r\n  v4StateView: '0x9d467fa9062b6e9b1a46e26007ad82db116c67cb',\r\n  v4QuoterAddress: '0x7de51022d70a725b508085468052e25e22b5c4c9',\r\n}\r\n\r\n// sepolia v3 addresses\r\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\r\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\r\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\r\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\r\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\r\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\r\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\r\n\r\n  // TODO: update mixedRouteQuoterV2Address once v4 on sepolia redeployed\r\n  mixedRouteQuoterV2Address: '0x4745f77b56a0e2294426e3936dc4fab68d9543cd',\r\n\r\n  // TODO: update all below once v4 on sepolia redeployed\r\n  v4PoolManagerAddress: '0xE03A1074c86CFeDd5C142C4F04F1a1536e203543',\r\n  v4PositionManagerAddress: '0x429ba70129df741B2Ca2a85BC3A2a3328e5c09b4',\r\n  v4StateView: '0xe1dd9c3fa50edb962e442f60dfbc432e24537e4c',\r\n  v4QuoterAddress: '0x61b3f2011a92d183c7dbadbda940a7555ccf9227',\r\n}\r\n\r\n// Avalanche v3 addresses\r\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\r\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\r\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\r\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\r\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\r\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\r\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\r\n\r\n  v4PoolManagerAddress: '0x06380c0e0912312b5150364b9dc4542ba0dbbc85',\r\n  v4PositionManagerAddress: '0xb74b1f14d2754acfcbbe1a221023a5cf50ab8acd',\r\n  v4StateView: '0xc3c9e198c735a4b97e3e683f391ccbdd60b69286',\r\n  v4QuoterAddress: '0xbe40675bb704506a3c2ccfb762dcfd1e979845c2',\r\n}\r\n\r\nconst BASE_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\r\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\r\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\r\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\r\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\r\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\r\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\r\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\r\n\r\n  v4PoolManagerAddress: '0x498581ff718922c3f8e6a244956af099b2652b2b',\r\n  v4PositionManagerAddress: '0x7c5f5a4bbd8fd63184577525326123b519429bdc',\r\n  v4StateView: '0xa3c0c9b65bad0b08107aa264b0f3db444b867a71',\r\n  v4QuoterAddress: '0x0d5e0f971ed27fbff6c2837bf31316121532048d',\r\n}\r\n\r\n// Base Goerli v3 addresses\r\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\r\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\r\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\r\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\r\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\r\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\r\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\r\n}\r\n\r\n// Base Sepolia v3 addresses\r\nconst BASE_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24',\r\n  multicallAddress: '0xd867e273eAbD6c853fCd0Ca0bFB6a3aE6491d2C1',\r\n  quoterAddress: '0xC5290058841028F1614F3A6F0F5816cAd0df5E27',\r\n  v3MigratorAddress: '0xCbf8b7f80800bd4888Fbc7bf1713B80FE4E23E10',\r\n  nonfungiblePositionManagerAddress: '0x27F971cb582BF9E50F397e4d29a5C7A34f11faA2',\r\n  tickLensAddress: '0xedf6066a2b290C185783862C7F4776A2C8077AD1',\r\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\r\n\r\n  // v4\r\n  v4PoolManagerAddress: '0x05E73354cFDd6745C338b50BcFDfA3Aa6fA03408',\r\n  v4PositionManagerAddress: '0x4b2c77d209d3405f41a037ec6c77f7f5b8e2ca80',\r\n  v4StateView: '0x571291b572ed32ce6751a2cb2486ebee8defb9b4',\r\n  v4QuoterAddress: '0x4a6513c898fe1b2d0e78d3b0e0a4a151589b1cba',\r\n}\r\n\r\nconst ZORA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\r\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\r\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\r\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\r\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\r\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\r\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\r\n\r\n  v4PoolManagerAddress: '0x0575338e4c17006ae181b47900a84404247ca30f',\r\n  v4PositionManagerAddress: '0xf66c7b99e2040f0d9b326b3b7c152e9663543d63',\r\n  v4StateView: '0x385785af07d63b50d0a0ea57c4ff89d06adf7328',\r\n  v4QuoterAddress: '0x5edaccc0660e0a2c44b06e07ce8b915e625dc2c6',\r\n}\r\n\r\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\r\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\r\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\r\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\r\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\r\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\r\n}\r\n\r\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\r\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\r\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\r\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\r\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\r\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\r\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\r\n}\r\n\r\nconst BLAST_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\r\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\r\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\r\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\r\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\r\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\r\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\r\n\r\n  v4PoolManagerAddress: '0x1631559198a9e474033433b2958dabc135ab6446',\r\n  v4PositionManagerAddress: '0x4ad2f4cca2682cbb5b950d660dd458a1d3f1baad',\r\n  v4StateView: '0x12a88ae16f46dce4e8b15368008ab3380885df30',\r\n  v4QuoterAddress: '0x6f71cdcb0d119ff72c6eb501abceb576fbf62bcf',\r\n}\r\n\r\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\r\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\r\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\r\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\r\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\r\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\r\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\r\n}\r\n\r\nconst WORLDCHAIN_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x7a5028BDa40e7B173C278C5342087826455ea25a',\r\n  multicallAddress: '0x0a22c04215c97E3F532F4eF30e0aD9458792dAB9',\r\n  quoterAddress: '0x10158D43e6cc414deE1Bd1eB0EfC6a5cBCfF244c',\r\n  v3MigratorAddress: '0x9EBDdCBa71C9027E1eB45135672a30bcFEec9de3',\r\n  nonfungiblePositionManagerAddress: '0xec12a9F9a09f50550686363766Cc153D03c27b5e',\r\n  tickLensAddress: '0xE61df0CaC9d85876aCE5E3037005D80943570623',\r\n  swapRouter02Address: '0x091AD9e2e6e5eD44c1c66dB50e49A601F9f36cF6',\r\n\r\n  v4PoolManagerAddress: '0xb1860d529182ac3bc1f51fa2abd56662b7d13f33',\r\n  v4PositionManagerAddress: '0xc585e0f504613b5fbf874f21af14c65260fb41fa',\r\n  v4StateView: '0x51d394718bc09297262e368c1a481217fdeb71eb',\r\n  v4QuoterAddress: '0x55d235b3ff2daf7c3ede0defc9521f1d6fe6c5c0',\r\n}\r\n\r\nconst UNICHAIN_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\r\n  multicallAddress: '0x9D0F15f2cf58655fDDcD1EE6129C547fDaeD01b1',\r\n  quoterAddress: '0x6Dd37329A1A225a6Fca658265D460423DCafBF89',\r\n  v3MigratorAddress: '0xb5FA244C9d6D04B2FBac84418b3c4910ED1Ae5f2',\r\n  nonfungiblePositionManagerAddress: '0xB7F724d6dDDFd008eFf5cc2834edDE5F9eF0d075',\r\n  tickLensAddress: '0x5f739c790a48E97eec0efb81bab5D152c0A0ecA0',\r\n  swapRouter02Address: '0xd1AAE39293221B77B0C71fBD6dCb7Ea29Bb5B166',\r\n\r\n  v4PoolManagerAddress: '0x00b036b58a818b1bc34d502d3fe730db729e62ac',\r\n  v4PositionManagerAddress: '0xf969aee60879c54baaed9f3ed26147db216fd664',\r\n  v4StateView: '0xc199f1072a74d4e905aba1a84d9a45e2546b6222',\r\n  v4QuoterAddress: '0x56dcd40a3f2d466f48e7f48bdbe5cc9b92ae4472',\r\n}\r\n\r\nconst UNICHAIN_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x1f98400000000000000000000000000000000003',\r\n  multicallAddress: '0xb7610f9b733e7d45184be3a1bc966960ccc54f0b',\r\n  quoterAddress: '0x565ac8c7863d9bb16d07e809ff49fe5cd467634c',\r\n  v3MigratorAddress: '0xb9d0c246f306b1aaf02ae6ba112d5ef25e5b60dc',\r\n  nonfungiblePositionManagerAddress: '0x943e6e07a7e8e791dafc44083e54041d743c46e9',\r\n  tickLensAddress: '0xd5d76fa166ab8d8ad4c9f61aaa81457b66cbe443',\r\n  swapRouter02Address: '0x73855d06de49d0fe4a9c42636ba96c62da12ff9c',\r\n\r\n  v4PoolManagerAddress: '0x1f98400000000000000000000000000000000004',\r\n  v4PositionManagerAddress: '0x4529a01c7a0410167c5740c487a8de60232617bf',\r\n  v4StateView: '0x86e8631a016f9068c3f085faf484ee3f5fdee8f2',\r\n  v4QuoterAddress: '0x333e3c607b141b18ff6de9f258db6e77fe7491e0',\r\n}\r\n\r\nconst MONAD_TESTNET_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x961235a9020b05c44df1026d956d1f4d78014276',\r\n  multicallAddress: '0xa707ceb989cc3728551ed0e6e44b718dd114cf44',\r\n  quoterAddress: '0x1ba215c17565de7b0cb7ecab971bcf540c24a862',\r\n  v3MigratorAddress: '0x0a78348b71f8ae8caff2f8f9d4d74a2f36516661',\r\n  nonfungiblePositionManagerAddress: '0x3dcc735c74f10fe2b9db2bb55c40fbbbf24490f7',\r\n  tickLensAddress: '0x337478eb6058455ecb3696184b30dd6a29e3a893',\r\n  swapRouter02Address: '0x4c4eabd5fb1d1a7234a48692551eaecff8194ca7',\r\n}\r\n\r\nconst MONAD_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x204faca1764b154221e35c0d20abb3c525710498',\r\n  multicallAddress: '0xd1b797d92d87b688193a2b976efc8d577d204343',\r\n  quoterAddress: '0x2d01411773c8c24805306e89a41f7855c3c4fe65',\r\n  v3MigratorAddress: '0x7078c4537c04c2b2e52ddba06074dbdacf23ca15',\r\n  nonfungiblePositionManagerAddress: '0x7197e214c0b767cfb76fb734ab638e2c192f4e53',\r\n  tickLensAddress: '0xf025e0fe9e331a0ef05c2ad3c4e9c64b625cda6f',\r\n  swapRouter02Address: '0xfe31f71c1b106eac32f1a19239c9a9a72ddfb900',\r\n}\r\n\r\nconst SONEIUM_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x42ae7ec7ff020412639d443e245d936429fbe717',\r\n  multicallAddress: '0x8ad5ef2f2508288d2de66f04dd883ad5f4ef62b2',\r\n  quoterAddress: '0x3e6c707d0125226ff60f291b6bd1404634f00aba',\r\n  v3MigratorAddress: '0xa107580f73bd797bd8b87ff24e98346d99f93ddb',\r\n  nonfungiblePositionManagerAddress: '0x56c1205b0244332011c1e866f4ea5384eb6bfa2c',\r\n  tickLensAddress: '0xcd08eefb928c86499e6235ac155906bb7c4dc41a',\r\n  swapRouter02Address: '0x7e40db01736f88464e5f4e42394f3d5bbb6705b9',\r\n\r\n  v4PoolManagerAddress: '0x360e68faccca8ca495c1b759fd9eee466db9fb32',\r\n  v4PositionManagerAddress: '0x1b35d13a2e2528f192637f14b05f0dc0e7deb566',\r\n  v4StateView: '0x76fd297e2d437cd7f76d50f01afe6160f86e9990',\r\n  v4QuoterAddress: '0x3972c00f7ed4885e145823eb7c655375d275a1c5',\r\n}\r\n\r\nconst MOONCHAIN_HUDSON_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x6DE2b019Bd9E4e4be1B444ca1710614C93BcBc8e',\r\n  multicallAddress: '0x1186894046B97893F788f0e33495999A49f8C58c',\r\n  quoterAddress: '0x80B28F551fD1aE5b9807158E66012E11117339dD',\r\n  v3MigratorAddress: '0xb5E2A4df37399e88C1264cee47e65dcAbfF2Dd3B',\r\n  nonfungiblePositionManagerAddress: '0x240819e8aD81Eb00a21A21e8a03A7ca0D3655041',\r\n  tickLensAddress: '0x2ce60a8cbd546557D561110BFc1a031996297c48',\r\n  swapRouter02Address: '0xC36cB23Cee0AC4B98414B352cF5a7f542878AC8A',\r\n}\r\n\r\nconst MOONCHAIN_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '',\r\n  multicallAddress: '',\r\n  quoterAddress: '',\r\n  v3MigratorAddress: '',\r\n  nonfungiblePositionManagerAddress: '',\r\n  tickLensAddress: '',\r\n  swapRouter02Address: '',\r\n}\r\n\r\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\r\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\r\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\r\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\r\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\r\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\r\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\r\n  [ChainId.CELO]: CELO_ADDRESSES,\r\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\r\n  [ChainId.BNB]: BNB_ADDRESSES,\r\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\r\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\r\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\r\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\r\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\r\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\r\n  [ChainId.BASE]: BASE_ADDRESSES,\r\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\r\n  [ChainId.BASE_SEPOLIA]: BASE_SEPOLIA_ADDRESSES,\r\n  [ChainId.ZORA]: ZORA_ADDRESSES,\r\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\r\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\r\n  [ChainId.BLAST]: BLAST_ADDRESSES,\r\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\r\n  [ChainId.WORLDCHAIN]: WORLDCHAIN_ADDRESSES,\r\n  [ChainId.UNICHAIN_SEPOLIA]: UNICHAIN_SEPOLIA_ADDRESSES,\r\n  [ChainId.UNICHAIN]: UNICHAIN_ADDRESSES,\r\n  [ChainId.MONAD_TESTNET]: MONAD_TESTNET_ADDRESSES,\r\n  [ChainId.SONEIUM]: SONEIUM_ADDRESSES,\r\n  [ChainId.MONAD]: MONAD_ADDRESSES,\r\n  [ChainId.MOONCHAIN_HUDSON]: MOONCHAIN_HUDSON_ADDRESSES,\r\n  [ChainId.MOONCHAIN]: MOONCHAIN_ADDRESSES,\r\n}\r\n\r\n/* V3 Contract Addresses */\r\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\r\n    return memo\r\n  }, {}),\r\n}\r\n\r\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\r\n    if (v3MigratorAddress) {\r\n      memo[chainId] = v3MigratorAddress\r\n    }\r\n    return memo\r\n  }, {}),\r\n}\r\n\r\nexport const MULTICALL_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\r\n    return memo\r\n  }, {}),\r\n}\r\n\r\n/**\r\n * The oldest V0 governance address\r\n */\r\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\r\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\r\n)\r\n/**\r\n * The older V1 governance address\r\n */\r\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\r\n}\r\n/**\r\n * The latest governor bravo that is currently admin of timelock\r\n */\r\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\r\n}\r\n\r\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\r\n}\r\n\r\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\r\n}\r\n\r\nexport const QUOTER_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\r\n    return memo\r\n  }, {}),\r\n}\r\n\r\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\r\n    if (nonfungiblePositionManagerAddress) {\r\n      memo[chainId] = nonfungiblePositionManagerAddress\r\n    }\r\n    return memo\r\n  }, {}),\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\r\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\r\n}\r\n\r\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\r\n}\r\n\r\nexport const TICK_LENS_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\r\n    if (tickLensAddress) {\r\n      memo[chainId] = tickLensAddress\r\n    }\r\n    return memo\r\n  }, {}),\r\n}\r\n\r\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\r\n  if (mixedRouteQuoterV1Address) {\r\n    memo[chainId] = mixedRouteQuoterV1Address\r\n  }\r\n  return memo\r\n}, {})\r\n\r\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\r\n  if (SUPPORTED_CHAINS.includes(chainId)) {\r\n    const id = chainId as SupportedChainsType\r\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\r\n  }\r\n  return ''\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | string | number\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { Currency } from '../currency'\r\nimport { Token } from '../token'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { Token } from './token'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class BaseCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends BaseCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\n\r\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address)\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\r\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\r\n\r\n/**\r\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function checkValidAddress(address: string): string {\r\n  if (startsWith0xLen42HexRegex.test(address)) {\r\n    return address\r\n  }\r\n\r\n  throw new Error(`${address} is not a valid address.`)\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport invariant from 'tiny-invariant'\r\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\r\nimport { BaseCurrency } from './baseCurrency'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends BaseCurrency {\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  /**\r\n   * The contract address on the chain on which this token lives\r\n   */\r\n  public readonly address: string\r\n\r\n  /**\r\n   * Relevant for fee-on-transfer (FOT) token taxes,\r\n   * Not every ERC20 token is FOT token, so this field is optional\r\n   */\r\n  public readonly buyFeeBps?: BigNumber\r\n  public readonly sellFeeBps?: BigNumber\r\n\r\n  /**\r\n   *\r\n   * @param chainId {@link BaseCurrency#chainId}\r\n   * @param address The contract address on the chain on which this token lives\r\n   * @param decimals {@link BaseCurrency#decimals}\r\n   * @param symbol {@link BaseCurrency#symbol}\r\n   * @param name {@link BaseCurrency#name}\r\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\r\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\r\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\r\n   */\r\n  public constructor(\r\n    chainId: number,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n    bypassChecksum?: boolean,\r\n    buyFeeBps?: BigNumber,\r\n    sellFeeBps?: BigNumber\r\n  ) {\r\n    super(chainId, decimals, symbol, name)\r\n    if (bypassChecksum) {\r\n      this.address = checkValidAddress(address)\r\n    } else {\r\n      this.address = validateAndParseAddress(address)\r\n    }\r\n    if (buyFeeBps) {\r\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\r\n    }\r\n    if (sellFeeBps) {\r\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\r\n    }\r\n    this.buyFeeBps = buyFeeBps\r\n    this.sellFeeBps = sellFeeBps\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n}\r\n","import { Token } from './token'\r\n\r\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\r\nexport const WETH9: { [chainId: number]: Token } = {\r\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\r\n  11155111: new Token(11155111, '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14', 18, 'WETH', 'Wrapped Ether'),\r\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\r\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\r\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\r\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\r\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  84532: new Token(84532, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\r\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\r\n  7777777: new Token(7777777, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  81457: new Token(81457, '0x4300000000000000000000000000000000000004', 18, 'WETH', 'Wrapped Ether'),\r\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\r\n  480: new Token(480, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  1301: new Token(1301, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  130: new Token(130, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  10143: new Token(10143, '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701', 18, 'WMON', 'Wrapped Monad'),\r\n  1868: new Token(1868, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  143: new Token(143, '0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A', 18, 'WMON', 'Wrapped Monad'),\r\n\r\n  177888: new Token(177888, '0x1C5b8F35933d4C9BD0B49ca0b4F91475E1a6501b', 18, 'WMCH', 'Wrapped MCH'),\r\n  999888: new Token(999888, '0x9423878649c42c6a7828fc66de3cf0046ecf7bbf', 18, 'WMCH', 'Wrapped MCH'),\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { NativeCurrency } from './nativeCurrency'\r\nimport { Token } from './token'\r\nimport { WETH9 } from './weth9'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst ONE = JSBI.BigInt(1)\r\nconst TWO = JSBI.BigInt(2)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\r\nimport { keccak256 } from '@ethersproject/keccak256'\r\nimport { toUtf8Bytes } from '@ethersproject/strings'\r\n\r\nexport function computeZksyncCreate2Address(\r\n  sender: string,\r\n  bytecodeHash: BytesLike,\r\n  salt: BytesLike,\r\n  input: BytesLike = '0x'\r\n) {\r\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\r\n  const inputHash = keccak256(input)\r\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\r\n  return getAddress(addressBytes)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n"],"names":["ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","BASE_SEPOLIA","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","WORLDCHAIN","UNICHAIN_SEPOLIA","UNICHAIN","MONAD_TESTNET","SONEIUM","MONAD","MOONCHAIN_HUDSON","MOONCHAIN","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","v4PoolManagerAddress","v4PositionManagerAddress","v4StateView","v4QuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","swapRouter02Address","mixedRouteQuoterV2Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","1","11155111","3","4","5","42","10","69","11155420","42161","421611","421614","8453","84532","56","137","43114","7777777","81457","324","480","1301","130","10143","1868","143","177888","999888","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","_CHAIN_TO_ADDRESSES_M2","includes","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}